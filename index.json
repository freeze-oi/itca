[{"content":"简介 本章讨论程序的设计思路（即算法），未涉及程序语言。\n生成线算法是 MC 插件开发的基础，后续将在其之上开发魔法阵插件。\n生成线算法 如何在 MC 中画一条线段？\n1. 点的坐标 首先得指定线段的端点。在 MC 的三维空间中，点的位置用坐标 $(x,y,z)$ 表示。\n现在假定端点的坐标为 $S(x_1,y_1,z_1)$ 和 $T(x_2,y_2,z_2)$。这些参数可以根据我们的需要进行调整。\n2. 线段的近似 如何画出线段 $ST$？\n$MC$ 并没有直接画线段的操作，但可以直接画点（这里只谈算法，具体操作以后说）。于是我们可以画一组间距很近的点，让玩家产生“这是线”的“错觉”。\n假设用 $1000$ 个点近似这根线，那么可以用程序算出这 $1000$ 个点的坐标，再传入 MC 去绘制。于是可以从点 $S$ 出发，向点 $T$ 的方向均匀移动 $1000$ 步，并在每次移动后保存点的坐标。这样就得到了 $1000$ 个点。\n3. 点的移动 从点 $S$ 移动到点 $T$，$x$ 坐标增加了 $x_2-x_1$，$y$ 坐标增加了 $y_2-y_1$，$z$ 坐标增加了 $z_2-z_1$。\n因而每次移动，就只需给当前点的 $x,y,z$ 坐标分别增加 $\\displaystyle\\frac{x_2-x_1}{1000}$，$\\displaystyle\\frac{y_2-y_1}{1000}$，$\\displaystyle\\frac{z_2-z_1}{1000}$。如果学过向量，这一块会很容易理解。\n4. 伪代码 // 伪代码表达算法的内容，并不能真正运行 function generateLine(x1, y1, z1, x2, y2, x2, nSample) { // 生成线函数  // 端点坐标为 S(x1, y1, z1) 和 T(x2, y2, z2)，nSample 为点的个数  x = x1, y = y1, z = z1; // 当前点的坐标（从 S 出发）  result; // 需要绘制的点的集合  while (x != x2 and y != y2 and z != z2) { // != 是 “不等于” 的意思  x = x + (x2 - x1) / nSample; y = y + (y2 - y1) / nSample; z = z + (z2 - z1) / nSample; result.add(x, y, z); // 追加点坐标 (x, y, z)  } return result; } 项目地址：网页链接\n","description":"","id":0,"section":"docs","tags":null,"title":"1 生成线算法","uri":"https://itca.site/docs/2021/mc-%E6%8F%92%E4%BB%B6/1-%E7%94%9F%E6%88%90%E7%BA%BF%E7%AE%97%E6%B3%95/"}]